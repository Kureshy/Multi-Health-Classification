# -*- coding: utf-8 -*-
"""Patient_Diabetes_Classification using ANNs  CMPE-257.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hWwTk4SJuoYf-ujE7cSPoTLKoOQahxx0

**This notebook represents a Classification ANN model**
"""

import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('diabetes.csv')
df

df.describe().transpose()

df.info()

df.corr()['Outcome'].sort_values().plot(kind='bar')

X=df.drop('Outcome',axis=1).values

y=df['Outcome'].values

X.shape

y.shape

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33,shuffle=True)

from sklearn.preprocessing import MinMaxScaler

scaler=MinMaxScaler()

X_train=scaler.fit_transform(X_train)

X_test=scaler.transform(X_test)

from tensorflow.keras.layers import Dropout,Dense
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.models import Sequential

from tensorflow.keras.callbacks import EarlyStopping

early_stop=EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=20)

model=Sequential()
model.add(Dense(40,activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(20,activation='relu'))
model.add(Dropout(0.35))
model.add(Dense(10,activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(1,activation='sigmoid'))
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=500,callbacks=[early_stop])

performence_metrics=pd.DataFrame(model.history.history)
performence_metrics.plot()

predictions=(model.predict(X_test) > 0.5).astype("int32")

predictions.shape

test_predictions=pd.Series(predictions.reshape(254,))

pred_df=pd.DataFrame(y_test,columns=['Y-True'])

pred_df=pd.concat([pred_df,test_predictions],axis=1)

pred_df.columns=['Y_true','Predicted Y']

from sklearn.metrics import confusion_matrix,classification_report

print(confusion_matrix(y_test,predictions))

cf_mat=confusion_matrix(y_test,predictions)
print(sns.heatmap(cf_mat/np.sum(cf_mat), annot=True, fmt='.2%'))

print(classification_report(y_test,predictions))

model.save('diabetes_weights.h5')